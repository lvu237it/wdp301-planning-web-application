import {
  createContext,
  useContext,
  useEffect,
  useState,
  useRef,
  useCallback,
} from 'react';
import axios from 'axios';
import { useMediaQuery } from 'react-responsive';
import { Toaster, toast } from 'sonner';
import { useLocation, useNavigate } from 'react-router-dom';
import {
  initSocketClient,
  getSocket,
  disconnectSocket,
} from '../utils/socketClient';
import {
  formatDateAMPMForVN,
  formatDateForNotification,
  formatDateShortForVN,
} from '../utils/dateUtils';

// Configure axios defaults
axios.defaults.withCredentials = true; // Include cookies in all requests

export const CommonContext = createContext();

export const useCommon = () => useContext(CommonContext);

export const Common = ({ children }) => {
  const navigate = useNavigate();
  const location = useLocation();
  // Get previous location from state, default to '/'
  const from = location.state?.from?.pathname || '/';

  const socketInitialized = useRef(false);
  const [socketConnected, setSocketConnected] = useState(false);

  const [accessToken, setAccessToken] = useState(
    () => localStorage.getItem('accessToken') || null
  );
  const [userDataLocal, setUserDataLocal] = useState(() => {
    return JSON.parse(localStorage.getItem('userData')) || null;
  });
  const [notifications, setNotifications] = useState(() => {
    try {
      const storedNotifications = localStorage.getItem('notifications');
      return storedNotifications ? JSON.parse(storedNotifications) : [];
    } catch (error) {
      console.error('Error parsing notifications from localStorage:', error);
      return [];
    }
  });

  // Notification count state
  const [notificationCount, setNotificationCount] = useState(0);

  // Sync notification count with unread notifications
  useEffect(() => {
    const unreadCount = notifications.filter((notif) => !notif.isRead).length;
    setNotificationCount(unreadCount);
  }, [notifications]);

  // Notification pagination states
  const [notificationPagination, setNotificationPagination] = useState({
    hasMore: true,
    currentPage: 1,
    totalCount: 0,
    loading: false,
  });

  // Enhanced responsive breakpoints
  const isMobile = useMediaQuery({ maxWidth: 768 });
  const isTablet = useMediaQuery({ minWidth: 769, maxWidth: 1024 });
  const isDesktop = useMediaQuery({ minWidth: 1025 });

  // ƒê·ªïi sang bi·∫øn env t∆∞∆°ng ·ª©ng (VITE_API_BASE_URL_DEVELOPMENT ho·∫∑c VITE_API_BASE_URL_PRODUCTION)
  // v√† build l·∫°i ƒë·ªÉ ch·∫°y server frontend tr√™n m√¥i tr∆∞·ªùng dev ho·∫∑c production
  const apiBaseUrl = import.meta.env.VITE_API_BASE_URL_DEVELOPMENT;
  // const apiBaseUrl = import.meta.env.VITE_API_BASE_URL_PRODUCTION;

  const [calendarUser, setCalendarUser] = useState(null);
  const [calendarBoard, setCalendarBoard] = useState(null);
  const [showGoogleAuthModal, setShowGoogleAuthModal] = useState(false);
  const [isGoogleAuthenticated, setIsGoogleAuthenticated] = useState(false);
  const [googleLinkStatus, setGoogleLinkStatus] = useState({
    hasGoogleAccount: false,
    loading: true,
  });
  const [isLinkingGoogle, setIsLinkingGoogle] = useState(false);

  // state workspace
  const [workspaces, setWorkspaces] = useState([]);
  const [loadingWorkspaces, setLoadingWorkspaces] = useState(true);
  const [workspacesError, setWorkspacesError] = useState(null);
  const [currentWorkspaceId, setCurrentWorkspaceId] = useState(null);

  // state boards
  const [boards, setBoards] = useState([]);
  const [loadingBoards, setLoading] = useState(false);
  const [boardsError, setError] = useState(null);

  const [isCheckingGoogleAuth, setIsCheckingGoogleAuth] = useState(false);
  const [isAuthenticated, setIsAuthenticated] = useState(
    !!localStorage.getItem('accessToken') && !!localStorage.getItem('userData')
  );

  // Skills states for fetching and managing skills
  const [skillsList, setSkillsList] = useState([]);
  const [loadingSkills, setLoadingSkills] = useState(false);
  const [skillsError, setSkillsError] = useState(null);

  // T·∫°o ref ƒë·ªÉ track ƒë√£ th·ª±c hi·ªán redirect hay ch∆∞a
  const hasRedirected = useRef(false);
  const isProcessingAuth = useRef(false); // Tr√°nh x·ª≠ l√Ω auth nhi·ªÅu l·∫ßn
  const isInitialLoad = useRef(true); // Track if this is initial app load

  // Ch·ªâ redirect khi th·ª±c s·ª± c·∫ßn thi·∫øt (sau login th√†nh c√¥ng), kh√¥ng redirect khi reload
  useEffect(() => {
    // N·∫øu l√† l·∫ßn ƒë·∫ßu load app v√† ƒë√£ c√≥ token + userData, ƒë√¢y l√† reload
    if (isInitialLoad.current && isAuthenticated && userDataLocal) {
      isInitialLoad.current = false;
      // Kh√¥ng redirect khi reload - gi·ªØ nguy√™n trang hi·ªán t·∫°i
      return;
    }

    // Ch·ªâ redirect v·ªÅ / khi:
    // 1. Kh√¥ng ph·∫£i initial load (ƒë√£ login th√†nh c√¥ng)
    // 2. ƒêang ·ªü auth pages (login/register)
    // 3. Kh√¥ng ph·∫£i Google callback
    // 4. Ch∆∞a redirect tr∆∞·ªõc ƒë√≥
    if (
      !isInitialLoad.current &&
      isAuthenticated &&
      userDataLocal &&
      (location.pathname === '/login' ||
        location.pathname === '/register' ||
        location.pathname === '/') &&
      !location.pathname.includes('/google-callback') &&
      !hasRedirected.current &&
      !isProcessingAuth.current
    ) {
      hasRedirected.current = true;
      navigate('/dashboard'); // Redirect to dashboard instead of root
    }

    // Mark as not initial load after first effect run
    if (isInitialLoad.current) {
      isInitialLoad.current = false;
    }
  }, [isAuthenticated, userDataLocal, location.pathname]);

  // Reset redirect flag khi user logout
  useEffect(() => {
    if (!isAuthenticated) {
      hasRedirected.current = false;
      isProcessingAuth.current = false;
      isInitialLoad.current = true; // Reset for next login
    }
  }, [isAuthenticated]);

  //Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ x√°c th·ª±c Google ch∆∞a v·ªõi logic c·∫£i thi·ªán
  const checkGoogleAuth = async (force = false) => {
    if (!accessToken || (isCheckingGoogleAuth && !force)) return;

    setIsCheckingGoogleAuth(true);
    try {
      const response = await axios.get(
        `${apiBaseUrl}/files/check-google-auth`,
        {
          headers: { Authorization: `Bearer ${accessToken}` },
          timeout: 10000,
        }
      );

      console.log('üîç Google auth check response:', response.data);

      // Log token expiry details from response
      if (response.data.tokens) {
        response.data.tokens.forEach((token) => {
          const now = new Date();
          const expiryDate = token.expiryDate
            ? new Date(token.expiryDate)
            : null;
          const timeUntilExpiry = expiryDate ? expiryDate - now : null;
          console.log('timeUntilExpiry', timeUntilExpiry);
          const hoursUntilExpiry = timeUntilExpiry
            ? Math.round(timeUntilExpiry / (1000 * 60 * 60))
            : null;

          console.log(`
üìÖ Frontend - Google Token Status:
   Service: ${token.service}
   Status: ${token.status}
   Expiry: ${expiryDate ? expiryDate.toLocaleString() : 'No expiry'}
   Time until expiry: ${hoursUntilExpiry ? `${hoursUntilExpiry} hours` : 'N/A'}
   Valid: ${token.isValid ? 'Yes' : 'No'}
          `);

          // Show toast notification if token is expiring soon (within 24 hours)
          // if (
          //   hoursUntilExpiry !== null &&
          //   hoursUntilExpiry < 24 &&
          //   hoursUntilExpiry > 0
          // ) {
          //   toast.warning(
          //     `Google ${token.service} token will expire in ${hoursUntilExpiry} hours`
          //   );
          // }
        });
      }

      if (response.data.status === 'success') {
        if (response.data.hasValidTokens) {
          // User has all valid Google tokens
          console.log('‚úÖ User has all valid Google tokens');
          setIsGoogleAuthenticated(true);
          setShowGoogleAuthModal(false);
        } else {
          // User needs to authenticate or refresh tokens
          console.log('‚ùå User needs Google authentication');
          setIsGoogleAuthenticated(false);

          // Only show modal if user has linked Google account but tokens need refresh
          // Don't force modal for users who haven't linked Google account yet
          if (googleLinkStatus.hasGoogleAccount) {
            console.log(
              'üì¢ User has linked Google account, checking if modal needed'
            );
            if (
              response.data.needsRefresh ||
              response.data.missingScopes?.length > 0
            ) {
              console.log('üîë Showing Google auth modal for token refresh');
              setShowGoogleAuthModal(true);
            }
          } else {
            console.log(
              'üö´ User has not linked Google account, not showing modal'
            );
            setShowGoogleAuthModal(false);
          }
        }
      } else {
        // Error response
        console.log('‚ùå Error checking Google auth');
        setIsGoogleAuthenticated(false);

        // Only show modal for users who have linked Google account
        if (googleLinkStatus.hasGoogleAccount) {
          console.log(
            'üîë Showing Google auth modal due to error for linked user'
          );
          setShowGoogleAuthModal(true);
        } else {
          console.log(
            'üö´ User has not linked Google account, not showing modal on error'
          );
          setShowGoogleAuthModal(false);
        }
      }
    } catch (error) {
      console.error('Error checking Google auth:', error);
      setIsGoogleAuthenticated(false);

      // Only show modal for authentication-related errors if user has linked Google account
      if (googleLinkStatus.hasGoogleAccount && error.response?.status === 401) {
        console.log(
          'üîë Showing Google auth modal due to 401 error for linked user'
        );
        setShowGoogleAuthModal(true);
      } else {
        console.log(
          'üö´ Not showing modal for error - user not linked or not auth error'
        );
        setShowGoogleAuthModal(false);
      }
    } finally {
      setIsCheckingGoogleAuth(false);
    }
  };

  const login = async (email, password) => {
    try {
      const response = await axios.post(
        `${apiBaseUrl}/login`,
        { email, password },
        {
          timeout: 15000,
          withCredentials: true, // Include cookies
        }
      );

      if (response.data.success) {
        const { accessToken, user } = response.data;
        return await handleLoginSuccess(accessToken, user);
      }
    } catch (error) {
      console.error('Login error:', error);
      // toast.error(error.response?.data?.message || 'Login failed');
      return false;
    }
  };

  // ƒêƒÉng nh·∫≠p Google OAuth
  const handleLoginSuccess = async (
    accessToken,
    user,
    isGoogleLogin = false
  ) => {
    // ƒê√°nh d·∫•u ƒëang x·ª≠ l√Ω auth ƒë·ªÉ tr√°nh conflicts
    isProcessingAuth.current = true;

    localStorage.setItem('accessToken', accessToken);
    localStorage.setItem('userData', JSON.stringify(user));

    setAccessToken(accessToken);
    setUserDataLocal(user);
    setIsAuthenticated(true);

    let userId = user?._id || user?.id;

    // Kh·ªüi t·∫°o socket v·ªõi callback c·∫£i thi·ªán
    if (userId && !socketInitialized.current) {
      console.log('üîå Initializing socket for user:', userId);
      try {
        await initSocketClient(userId, apiBaseUrl, () => {
          console.log('üéØ Socket connected callback triggered');
          socketInitialized.current = true;

          // Thi·∫øt l·∫≠p socket listeners ngay khi callback ƒë∆∞·ª£c g·ªçi
          setupSocketListeners();

          // Set connected state ngay l·∫≠p t·ª©c
          setSocketConnected(true);
          console.log('‚úÖ Socket connection status set to true');
        });
        console.log('‚úÖ Socket initialization completed');

        // Ki·ªÉm tra b·ªï sung sau m·ªôt kho·∫£ng th·ªùi gian ng·∫Øn
        setTimeout(() => {
          try {
            const socket = getSocket();
            if (socket && socket.connected) {
              console.log('üîó Secondary socket verification: connected');
              setSocketConnected(true);
            } else {
              console.log('‚ö†Ô∏è Secondary socket verification: not connected');
              setSocketConnected(false);
            }
          } catch (error) {
            console.error('‚ùå Error in secondary socket check:', error);
          }
        }, 1000);
      } catch (error) {
        console.error('‚ùå Socket initialization failed:', error);
        setSocketConnected(false);
      }
    }

    // G·ªçi checkGoogleLinkStatus TR∆Ø·ªöC ƒë·ªÉ x√°c ƒë·ªãnh user c√≥ linked Google account kh√¥ng
    console.log('üîç Checking Google link status first');
    try {
      await checkGoogleLinkStatus(); // Check Google link status FIRST
      // Sau ƒë√≥ m·ªõi check Google auth v·ªõi th√¥ng tin link status ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t
      console.log('üîç Now calling checkGoogleAuth after link status updated');
      await checkGoogleAuth(true); // Force check even if userDataLocal might not be fully updated in state yet
    } catch (error) {
      console.error('Error checking Google auth immediately:', error);
    }

    // T·∫£i c√°c d·ªØ li·ªáu kh√°c trong background
    setTimeout(async () => {
      try {
        await Promise.all([fetchNotifications(true), getCalendarUser()]);
      } catch (error) {
        console.error('Error loading background data:', error);
      }
    }, 100);

    // Ki·ªÉm tra socket status cu·ªëi c√πng sau khi t·∫•t c·∫£ ƒë√£ ho√†n th√†nh
    setTimeout(() => {
      if (socketInitialized.current) {
        try {
          const socket = getSocket();
          const isConnected = socket && socket.connected;
          console.log('üîó Final socket status verification:', isConnected);
          setSocketConnected(isConnected);
        } catch (error) {
          console.error('‚ùå Error in final socket verification:', error);
          setSocketConnected(false);
        }
      }
    }, 2000);

    // Ch·ªâ hi·ªÉn th·ªã toast v√† navigate n·∫øu kh√¥ng ph·∫£i Google login
    if (!isGoogleLogin) {
      toast.success('Login successful!');
      // Ch·ªâ navigate n·∫øu ƒëang ·ªü auth pages
      if (location.pathname === '/login' || location.pathname === '/register') {
        navigate('/dashboard');
      }
    }

    // Reset processing flag sau khi ho√†n th√†nh
    setTimeout(() => {
      isProcessingAuth.current = false;
    }, 1500);

    return true;
  };

  const googleLogin = async () => {
    try {
      // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn backend ƒë·ªÉ b·∫Øt ƒë·∫ßu Google OAuth
      window.location.href = `${apiBaseUrl}/google/login`;
    } catch (error) {
      console.error('Google login error:', error);
      toast.error('Failed to initiate Google login');
      return false;
    }
  };

  // ƒêƒÉng k√Ω truy·ªÅn th·ªëng
  const register = async (username, email, password, passwordConfirm) => {
    try {
      const response = await axios.post(
        `${apiBaseUrl}/signup`,
        {
          username,
          email,
          password,
          passwordConfirm,
        },
        {
          timeout: 15000,
          withCredentials: true, // Include cookies
        }
      );

      console.log('üîç Registration response:', response.data);
      console.log('response.data.status', response.data.status);

      if (response.data.status === 'success') {
        const { token, data } = response.data;
        return await handleLoginSuccess(token, data.user);
      }
    } catch (error) {
      console.error('Registration error:', error);
      toast.error(error.response?.data?.message || 'Registration failed');
      return false;
    }
  };

  const logout = async () => {
    try {
      await axios.get(`${apiBaseUrl}/logout`, {
        headers: { Authorization: `Bearer ${accessToken}` },
        withCredentials: true, // Include cookies
      });
    } catch (error) {
      console.error('Logout error:', error);
    }

    localStorage.removeItem('accessToken');
    localStorage.removeItem('userData');
    localStorage.removeItem('notifications');

    setAccessToken(null);
    setUserDataLocal(null);
    setIsAuthenticated(false);
    setNotifications([]);
    setNotificationCount(0);
    setCalendarUser(null);
    setCalendarBoard(null);
    setIsGoogleAuthenticated(false);
    setShowGoogleAuthModal(false);
    setIsCheckingGoogleAuth(false);
    setNotificationPagination({
      hasMore: true,
      currentPage: 1,
      totalCount: 0,
      loading: false,
    });
    setSkillsList([]); // Reset skills on logout
    setLoadingSkills(false);
    setSkillsError(null);

    disconnectSocket();
    socketInitialized.current = false;
    setSocketConnected(false);

    navigate('/login');
  };

  // Fetch user profile
  const fetchUserProfile = useCallback(async () => {
    if (!accessToken) {
      console.log('‚ö†Ô∏è No access token, skipping fetchUserProfile');
      return null;
    }
    try {
      const response = await axios.get(`${apiBaseUrl}/users/profile`, {
        headers: { Authorization: `Bearer ${accessToken}` },
        timeout: 10000,
      });
      if (response.data.status === 'success') {
        const user = response.data.data.user;
        setUserDataLocal(user);
        localStorage.setItem('userData', JSON.stringify(user));
        return user;
      } else {
        throw new Error(response.data.message || 'Failed to fetch profile');
      }
    } catch (error) {
      console.error('Error fetching user profile:', error);
      toast.error(error.response?.data?.message || 'Failed to fetch profile');
      return null;
    }
  }, [accessToken]);
  // Update user profile
  const updateUserProfile = async (profileData) => {
    if (!accessToken) {
      console.log('‚ö†Ô∏è No access token, skipping updateUserProfile');
      return false;
    }

    try {
      const response = await axios.put(
        `${apiBaseUrl}/users/update`,
        profileData,
        {
          headers: { Authorization: `Bearer ${accessToken}` },
          timeout: 10000,
        }
      );

      if (response.data.status === 'success') {
        const updatedUser = response.data.data.user;
        setUserDataLocal(updatedUser);
        localStorage.setItem('userData', JSON.stringify(updatedUser));
        toast.success('Profile updated successfully!');
        return true;
      } else {
        throw new Error(response.data.message || 'Failed to update profile');
      }
    } catch (error) {
      console.error('Error updating user profile:', error);
      toast.error(error.response?.data?.message || 'Failed to update profile');
      return false;
    }
  };

  // Fetch all skills from backend
  const fetchAllSkills = async () => {
    if (!accessToken) {
      console.log('‚ö†Ô∏è No access token, skipping fetchAllSkills');
      return;
    }

    setLoadingSkills(true);
    setSkillsError(null);

    try {
      const response = await axios.get(`${apiBaseUrl}/skills`, {
        headers: { Authorization: `Bearer ${accessToken}` },
        timeout: 10000,
      });

      if (response.data.status === 'success') {
        // Extract skills array from response.data.data.skills
        const skillsData = response.data.data?.skills || [];
        setSkillsList(skillsData);
      } else {
        throw new Error(
          response.data.message || 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch k·ªπ nƒÉng'
        );
      }
    } catch (error) {
      console.error('L·ªói khi l·∫•y danh s√°ch k·ªπ nƒÉng:', error);
      setSkillsError(
        error.response?.data?.message || 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch k·ªπ nƒÉng'
      );
      toast.error(
        error.response?.data?.message || 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch k·ªπ nƒÉng'
      );
      setSkillsList([]); // Ensure skillsList is an empty array on error
    } finally {
      setLoadingSkills(false);
    }
  };

  // Fetch skills on mount if authenticated
  useEffect(() => {
    if (accessToken && isAuthenticated) {
      fetchAllSkills();
    }
  }, [accessToken, isAuthenticated]);

  // Fetch notifications (initial load)
  const fetchNotifications = async (reset = false) => {
    let userId = userDataLocal?.id || userDataLocal?._id;
    if (!accessToken || !userId) return;

    try {
      const skip = reset ? 0 : notifications.length;
      const response = await axios.get(`${apiBaseUrl}/notification`, {
        headers: { Authorization: `Bearer ${accessToken}` },
        params: { limit: 20, skip },
        timeout: 10000,
      });

      if (response.data.status === 'success') {
        const newNotifs = response.data.data?.notifications || [];
        const pagination = response.data.pagination || {};

        if (reset) {
          setNotifications(newNotifs);
          localStorage.setItem('notifications', JSON.stringify(newNotifs));
        } else {
          const updatedNotifs = [...notifications, ...newNotifs];
          setNotifications(updatedNotifs);
          localStorage.setItem('notifications', JSON.stringify(updatedNotifs));
        }

        setNotificationPagination({
          hasMore: pagination.hasMore || false,
          currentPage: pagination.currentPage || 1,
          totalCount: pagination.totalCount || 0,
          loading: false,
        });
      }
    } catch (error) {
      console.error('Error fetching notifications:', error);
      if (reset) {
        setNotifications([]);
        localStorage.removeItem('notifications');
      }
      setNotificationPagination((prev) => ({ ...prev, loading: false }));
      // toast.error(error.response?.data?.message || 'L·ªói khi t·∫£i th√¥ng b√°o');
    }
  };

  // Load more notifications for infinite scroll
  const loadMoreNotifications = async () => {
    let userId = userDataLocal?.id || userDataLocal?._id;
    if (
      !accessToken ||
      !userId ||
      notificationPagination.loading ||
      !notificationPagination.hasMore
    ) {
      return;
    }

    setNotificationPagination((prev) => ({ ...prev, loading: true }));

    try {
      const skip = notifications.length;
      const response = await axios.get(`${apiBaseUrl}/notification`, {
        headers: { Authorization: `Bearer ${accessToken}` },
        params: { limit: 20, skip },
        timeout: 10000,
      });

      if (response.data.status === 'success') {
        const newNotifs = response.data.data?.notifications || [];
        const pagination = response.data.pagination || {};

        const updatedNotifs = [...notifications, ...newNotifs];
        setNotifications(updatedNotifs);
        localStorage.setItem('notifications', JSON.stringify(updatedNotifs));

        setNotificationPagination({
          hasMore: pagination.hasMore || false,
          currentPage: pagination.currentPage || 1,
          totalCount: pagination.totalCount || 0,
          loading: false,
        });
      }
    } catch (error) {
      console.error('Error loading more notifications:', error);
      setNotificationPagination((prev) => ({ ...prev, loading: false }));
      toast.error('Kh√¥ng th·ªÉ t·∫£i th√™m th√¥ng b√°o');
    }
  };

  // Mark notification as read
  const markNotificationAsRead = async (notificationId) => {
    if (!accessToken || !notificationId) return;

    // Ki·ªÉm tra xem notification ƒë√£ ƒë∆∞·ª£c ƒë·ªçc ch∆∞a
    const notification = notifications.find(
      (n) => n.notificationId === notificationId
    );
    if (notification && notification.isRead) {
      return;
    }

    try {
      const response = await axios.patch(
        `${apiBaseUrl}/notification/${notificationId}/read`,
        {},
        {
          headers: { Authorization: `Bearer ${accessToken}` },
          timeout: 10000,
        }
      );

      if (response.data.status === 'success') {
        setNotifications((prev) => {
          const updated = prev.map((n) =>
            n.notificationId === notificationId
              ? { ...n, isRead: true, readAt: formatDateAMPMForVN(new Date()) }
              : n
          );
          localStorage.setItem('notifications', JSON.stringify(updated));
          return updated;
        });
      }
    } catch (error) {
      console.error('‚ùå Error marking notification as read:', error);
      // toast.error(
      //   error.response?.data?.message ||
      //     'Kh√¥ng th·ªÉ ƒë√°nh d·∫•u th√¥ng b√°o l√† ƒë√£ ƒë·ªçc'
      // );
    }
  };

  // Respond to event invitation
  const respondToEventInvitation = async (
    eventId,
    status,
    notificationId,
    forceAccept = false
  ) => {
    let userId = userDataLocal?.id || userDataLocal?._id;
    if (!accessToken || !eventId || !userId) return { success: false };

    try {
      const response = await axios.patch(
        `${apiBaseUrl}/event/${eventId}/participants/${userId}/update-status`,
        { status, forceAccept },
        {
          headers: { Authorization: `Bearer ${accessToken}` },
          timeout: 10000,
        }
      );

      if (response.data.status === 200) {
        console.log('‚úÖ Event invitation response successful:', {
          eventId,
          status,
          notificationId,
        });

        // C·∫≠p nh·∫≠t local state ngay l·∫≠p t·ª©c ƒë·ªÉ UI ph·∫£n h·ªìi nhanh
        setNotifications((prevNotifications) =>
          prevNotifications.map((notif) => {
            if (
              notif.notificationId === notificationId &&
              notif.type === 'event_invitation'
            ) {
              console.log('üîÑ Updating notification state locally:', {
                notificationId,
                oldStatus: notif.responseStatus,
                newStatus: status,
              });
              return {
                ...notif,
                responseStatus: status,
                responded: true,
              };
            }
            return notif;
          })
        );

        // Mark notification as read
        await markNotificationAsRead(notificationId);

        // Refresh notifications sau khi c·∫≠p nh·∫≠t local state ƒë·ªÉ ƒë·∫£m b·∫£o ƒë·ªìng b·ªô
        setTimeout(() => {
          console.log('üîÑ Refreshing notifications after response');
          fetchNotifications(true);
        }, 1000);

        // Kh√¥ng hi·ªÉn th·ªã toast ·ªü ƒë√¢y n·ªØa, ƒë·ªÉ Header.jsx handle
        return { success: true };
      }
    } catch (error) {
      console.error('‚ùå Error responding to event invitation:', error);

      // Handle conflict case
      if (error.response?.status === 409 && error.response?.data?.hasConflict) {
        return {
          success: false,
          hasConflict: true,
          conflictData: error.response.data,
        };
      }

      toast.error(
        error.response?.data?.message ||
          'Kh√¥ng th·ªÉ ph·∫£n h·ªìi l·ªùi m·ªùi tham gia s·ª± ki·ªán'
      );
      return { success: false };
    }
  };

  // Update event status based on time (improved - bulk update all user events)
  const updateAllUserEventsStatusByTime = async () => {
    if (!accessToken) return null;

    try {
      const response = await axios.patch(
        `${apiBaseUrl}/event/update-all-status-by-time`,
        {},
        {
          headers: { Authorization: `Bearer ${accessToken}` },
          timeout: 15000, // TƒÉng timeout cho bulk operation
        }
      );

      if (response.data.status === 200) {
        console.log(
          `‚úÖ Updated ${response.data.data.updatedEvents}/${response.data.data.totalEvents} events status`
        );
        return response.data.data;
      }
    } catch (error) {
      console.error('‚ùå Error updating all user events status by time:', error);
      // Kh√¥ng hi·ªÉn th·ªã toast error v√¨ ƒë√¢y l√† background process
      return null;
    }
  };

  // Update event status based on time (legacy - single event)
  const updateEventStatusByTime = async (eventId) => {
    if (!accessToken || !eventId) return null;

    try {
      const response = await axios.patch(
        `${apiBaseUrl}/event/${eventId}/update-status-by-time`,
        {},
        {
          headers: { Authorization: `Bearer ${accessToken}` },
          timeout: 10000,
        }
      );

      if (response.data.status === 200) {
        return response.data.data;
      }
    } catch (error) {
      console.error('‚ùå Error updating event status by time:', error);
      // Kh√¥ng hi·ªÉn th·ªã toast error v√¨ ƒë√¢y l√† background process
      return null;
    }
  };

  // Setup socket listeners v·ªõi c·∫£i thi·ªán
  const setupSocketListeners = () => {
    const socket = getSocket();
    if (!socket) {
      console.warn('‚ö†Ô∏è Socket not available in setupSocketListeners');
      return;
    }

    // Existing socket listeners...
    socket.on('connect', () => {
      setSocketConnected(true);
      console.log('üîó Socket connected successfully:', socket.id);
    });

    socket.on('disconnect', () => {
      setSocketConnected(false);
      console.log('üîå Socket disconnected');
    });

    socket.on('connect_error', (error) => {
      setSocketConnected(false);
      console.error('‚ùå Socket connection error:', error);
    });

    // Handle notifications
    if (userDataLocal) {
      const handleNewNotification = (notification) => {
        console.log('üì± New notification received:', notification);

        // Add notification to local state
        setNotifications((prev) => {
          // Avoid duplicates
          const exists = prev.some(
            (n) => n.notificationId === notification.notificationId
          );
          if (exists) return prev;

          const newNotification = {
            notificationId: notification.notificationId,
            title: notification.title,
            content: notification.content,
            type: notification.type,
            isRead: false,
            createdAt: notification.createdAt,
            eventId: notification.eventId || null,
            taskId: notification.taskId || null,
            messageId: notification.messageId || null,
            responseStatus: notification.responseStatus || null,
            responded: notification.responded || false,
          };
          return [newNotification, ...prev];
        });

        // Show toast notifications for different types
        const toastMessages = {
          // Task notifications
          task_created: `‚úÖ T·∫°o nhi·ªám v·ª• th√†nh c√¥ng: "${notification.content}"`,
          task_assigned: `üìã B·∫°n ƒë∆∞·ª£c giao nhi·ªám v·ª• m·ªõi: "${notification.content}"`,
          task_assignment_confirmed: `‚úÖ ${notification.content}`,
          task_unassigned: `‚ùå ${notification.content}`,
          task_unassignment_confirmed: `‚úÖ ${notification.content}`,
          task_updated: `üìù ${notification.content}`,
          task_deleted: `üóëÔ∏è ${notification.content}`,
          task_progress_updated: `üìä ${notification.content}`,

          // List notifications
          list_created: `‚úÖ ${notification.content}`,
          list_updated: `üìù ${notification.content}`,
          list_deleted: `üóëÔ∏è ${notification.content}`,

          // Event notifications
          event_invitation: `üìÖ L·ªùi m·ªùi s·ª± ki·ªán: ${notification.content}`,
          event_updated: `üìù S·ª± ki·ªán ƒë∆∞·ª£c c·∫≠p nh·∫≠t: ${notification.content}`,
          event_cancelled: `‚ùå S·ª± ki·ªán b·ªã h·ªßy: ${notification.content}`,
          event_reminder: `‚è∞ Nh·∫Øc nh·ªü s·ª± ki·ªán: ${notification.content}`,

          // Message notifications
          new_message: `üí¨ Tin nh·∫Øn m·ªõi: ${notification.content}`,

          // File notifications
          file_shared: `üìé ${notification.content}`,
          task_document_added: `üìé ${notification.content}`,
          task_document_removed: `üóëÔ∏è ${notification.content}`,

          // Board/Workspace notifications
          board_invite: `üìã ${notification.content}`,
          workspace_invite: `üè¢ ${notification.content}`,

          // Google integrations
          google_auth: `üîó ${notification.content}`,
          google_link_success: `‚úÖ ${notification.content}`,
          google_unlink_success: `‚ùå ${notification.content}`,

          // Default fallback
          default: notification.content,
        };

        const toastMessage =
          toastMessages[notification.type] || toastMessages.default;

        toast.success(toastMessage, {
          position: 'top-right',
          autoClose: 4000,
          hideProgressBar: false,
          closeOnClick: true,
          pauseOnHover: true,
          draggable: true,
        });
      };

      socket.on('new_notification', handleNewNotification);

      const handleNotificationUpdate = ({ notificationId, isRead }) => {
        console.log('üì® Notification update received:', {
          notificationId,
          isRead,
        });
        setNotifications((prev) =>
          prev.map((notif) =>
            notif.notificationId === notificationId
              ? { ...notif, isRead }
              : notif
          )
        );

        if (isRead) {
          setNotificationCount((prev) => Math.max(0, prev - 1));
        }
      };

      socket.on('notification_update', handleNotificationUpdate);
    }

    // Handle activity logs
    const handleNewActivity = (activityLog) => {
      console.log('üìä New activity log received:', activityLog);

      // Show toast notifications for different activity types
      if (activityLog.action.startsWith('task_')) {
        const actionMessages = {
          task_created: '‚úÖ Nhi·ªám v·ª• m·ªõi ƒë∆∞·ª£c t·∫°o',
          task_updated: 'üìù Nhi·ªám v·ª• ƒë∆∞·ª£c c·∫≠p nh·∫≠t',
          task_assigned: 'üë§ Nhi·ªám v·ª• ƒë∆∞·ª£c giao',
          task_unassigned: 'üë• H·ªßy giao nhi·ªám v·ª•',
          task_checklist_updated: '‚òëÔ∏è Checklist ƒë∆∞·ª£c c·∫≠p nh·∫≠t',
          task_checklist_item_completed: '‚úÖ Ho√†n th√†nh nhi·ªám v·ª• con',
          task_checklist_item_uncompleted: '‚ùå B·ªè ho√†n th√†nh nhi·ªám v·ª• con',
          task_document_added: 'üìé Th√™m t√†i li·ªáu v√†o nhi·ªám v·ª•',
          task_document_shared: 'üîó Chia s·∫ª t√†i li·ªáu nhi·ªám v·ª•',
          task_document_renamed: '‚úèÔ∏è ƒê·ªïi t√™n t√†i li·ªáu',
          task_document_removed: 'üóëÔ∏è X√≥a t√†i li·ªáu kh·ªèi nhi·ªám v·ª•',
          task_deleted: 'üóëÔ∏è X√≥a nhi·ªám v·ª•',
        };

        const message =
          actionMessages[activityLog.action] || 'üìÑ Ho·∫°t ƒë·ªông m·ªõi';
        // toast.info(`${message} b·ªüi ${activityLog.userName}`, {
        //   position: 'top-right',
        //   autoClose: 3000,
        //   hideProgressBar: false,
        // });
      } else if (activityLog.action.startsWith('list_')) {
        const actionMessages = {
          list_created: 'üìã Danh s√°ch m·ªõi ƒë∆∞·ª£c t·∫°o',
          list_updated: '‚úèÔ∏è Danh s√°ch ƒë∆∞·ª£c c·∫≠p nh·∫≠t',
          list_deleted: 'üóëÔ∏è Danh s√°ch ƒë∆∞·ª£c x√≥a',
          list_task_moved: 'üîÑ Nhi·ªám v·ª• ƒë∆∞·ª£c di chuy·ªÉn',
        };

        const message =
          actionMessages[activityLog.action] || 'üìÑ Ho·∫°t ƒë·ªông m·ªõi';
        toast.info(`${message} b·ªüi ${activityLog.userName}`, {
          position: 'top-right',
          autoClose: 3000,
          hideProgressBar: false,
        });
      }

      // This will be handled by BoardActivityLog component
      window.dispatchEvent(
        new CustomEvent('new_board_activity', {
          detail: activityLog,
        })
      );
    };

    const handleTaskActivity = (activityLog) => {
      console.log('üìã New task activity received:', activityLog);

      // Handle sensitive task activities with more discrete notifications
      if (
        activityLog.action === 'task_assigned' ||
        activityLog.action === 'task_unassigned'
      ) {
        const message =
          activityLog.action === 'task_assigned'
            ? 'üîí C√≥ c·∫≠p nh·∫≠t giao nhi·ªám v·ª•'
            : 'üîí C√≥ c·∫≠p nh·∫≠t h·ªßy giao nhi·ªám v·ª•';
        toast.info(message, {
          position: 'top-right',
          autoClose: 2000,
          hideProgressBar: false,
        });
      }

      // Handle sensitive task activity logs
      window.dispatchEvent(
        new CustomEvent('new_task_activity', {
          detail: activityLog,
        })
      );
    };

    const handleAdminActivity = (activityLog) => {
      console.log('üëë New admin activity received:', activityLog);
      // Handle admin-only activity logs
      window.dispatchEvent(
        new CustomEvent('new_admin_activity', {
          detail: activityLog,
        })
      );
    };

    // Handle real-time event message events
    const handleNewEventMessage = (data) => {
      console.log('üí¨ New event message received via socket:', data);

      const { eventId, message } = data;

      // Emit custom event v·ªõi ƒë·∫ßy ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ Calendar.jsx c√≥ th·ªÉ handle
      const customEvent = new CustomEvent('new_event_message', {
        detail: {
          eventId,
          message: {
            _id: message._id,
            content: message.content,
            userId: message.userId,
            createdAt: message.createdAt,
            isEdited: message.isEdited || false,
            editedAt: message.editedAt || null,
            isSystemMessage: message.isSystemMessage || false, // Th√™m field isSystemMessage
          },
        },
      });

      window.dispatchEvent(customEvent);
    };

    const handleEditEventMessage = (data) => {
      console.log('‚úèÔ∏è Edit event message received via socket:', data);
      // Bridge socket event to window custom event
      window.dispatchEvent(
        new CustomEvent('edit_event_message', {
          detail: data,
        })
      );
    };

    const handleDeleteEventMessage = (data) => {
      console.log('üóëÔ∏è Delete event message received via socket:', data);
      // Bridge socket event to window custom event
      window.dispatchEvent(
        new CustomEvent('delete_event_message', {
          detail: data,
        })
      );
    };

    socket.on('new_activity', handleNewActivity);
    socket.on('task_activity', handleTaskActivity);
    socket.on('admin_activity', handleAdminActivity);

    // Add message event listeners
    socket.on('new_event_message', handleNewEventMessage);
    socket.on('edit_event_message', handleEditEventMessage);
    socket.on('delete_event_message', handleDeleteEventMessage);

    // Store listeners for cleanup
    return () => {
      if (socket) {
        socket.off('connect');
        socket.off('disconnect');
        socket.off('connect_error');
        socket.off('new_notification');
        socket.off('notification_update');
        socket.off('new_activity', handleNewActivity);
        socket.off('task_activity', handleTaskActivity);
        socket.off('admin_activity', handleAdminActivity);
        socket.off('new_event_message', handleNewEventMessage);
        socket.off('edit_event_message', handleEditEventMessage);
        socket.off('delete_event_message', handleDeleteEventMessage);
      }
    };
  };

  //Create a personal calendar for user (if needed)
  const createInitialCalendar = async () => {
    try {
      const response = await axios.post(
        `${apiBaseUrl}/calendar`,
        {
          name: 'Personal Working Calendar',
          description: 'A calendar for each user in system',
          ownerType: 'user',
        },
        {
          headers: {
            Authorization: `Bearer ${accessToken}`,
            timeout: 10000,
          },
        }
      );
    } catch (error) {
      // console.error('Error creating calendar:', error.response?.data?.message);
    }
  };

  // Get user calendar
  const getCalendarUser = async () => {
    try {
      const response = await axios.get(`${apiBaseUrl}/calendar/get-by-user`, {
        headers: {
          Authorization: `Bearer ${accessToken}`,
          timeout: 10000,
        },
      });
      if (response.data.status === 200 && response.data.data?.length > 0) {
        setCalendarUser(response.data.data[0]); // L·∫•y l·ªãch ƒë·∫ßu ti√™n
      }
    } catch (error) {
      console.error(
        'L·ªói khi l·∫•y l·ªãch user:',
        error.response?.data?.message || error.message
      );
      if (error.response?.status === 404) {
        // Kh√¥ng t√¨m th·∫•y l·ªãch, th·ª≠ t·∫°o m·ªõi
        const created = await createInitialCalendar();
        if (!created) {
          // toast.error('Kh√¥ng th·ªÉ t·∫°o l·ªãch c√° nh√¢n');
          console.error('Kh√¥ng th·ªÉ t·∫°o l·ªãch c√° nh√¢n');
        }
      }
    }
  };

  // Get board calendar
  const getBoardCalendar = async (boardId) => {
    if (!accessToken || !boardId) return { success: false };

    try {
      const response = await axios.get(
        `${apiBaseUrl}/calendar/get-by-board/${boardId}`,
        {
          headers: {
            Authorization: `Bearer ${accessToken}`,
          },
          timeout: 10000,
        }
      );

      if (response.data.status === 200 && response.data.data?.length > 0) {
        console.log('lich cua board', response.data.data[0]);
        setCalendarBoard(response.data.data[0]);
        return {
          success: true,
          data: response.data.data,
        };
      } else {
        return {
          success: true,
          data: [],
        };
      }
    } catch (error) {
      console.error(
        'L·ªói khi l·∫•y l·ªãch board:',
        error.response?.data?.message || error.message
      );
      if (error.response?.status === 404) {
        // Kh√¥ng t√¨m th·∫•y l·ªãch, th·ª≠ t·∫°o m·ªõi
        const created = await createInitialCalendarForBoard(boardId);
        if (created) {
          return { success: true, data: [created] };
        }
      }
      return { success: false, error: error.response?.data?.message };
    }
  };

  // X·ª≠ l√Ω x√°c th·ª±c Google
  const handleGoogleAuth = async () => {
    try {
      console.log('Starting Google auth process...');
      const response = await axios.get(`${apiBaseUrl}/files/get-auth-url`, {
        headers: { Authorization: `Bearer ${accessToken}` },
        timeout: 10000,
      });

      console.log('Auth URL response:', response.data);

      if (response.data.status === 'success' && response.data.data?.authUrl) {
        // Store current URL to return after auth
        sessionStorage.setItem('returnToUrl', window.location.pathname);

        // Redirect to Google auth
        window.location.href = response.data.data.authUrl;
      } else if (
        response.data.status === 'success' &&
        !response.data.data?.authUrl
      ) {
        // If no authUrl is provided, it means all scopes are already authorized
        console.log('All required scopes are already authorized');
        setIsGoogleAuthenticated(true);
        setShowGoogleAuthModal(false);
        toast.success('Google authentication is already complete');
      } else {
        throw new Error('Invalid response format');
      }
    } catch (error) {
      console.error('Google auth error:', error);
      toast.error(
        error.response?.data?.message ||
          'Error initiating Google authentication. Please try again.'
      );

      // Force recheck auth status
      await checkGoogleAuth(true);
    }
  };

  // Check Google link status for current user
  const checkGoogleLinkStatus = async () => {
    if (!accessToken) return;

    setGoogleLinkStatus((prev) => ({ ...prev, loading: true }));

    try {
      const response = await axios.get(`${apiBaseUrl}/google-link-status`, {
        headers: { Authorization: `Bearer ${accessToken}` },
        timeout: 10000,
      });

      if (response.data.success) {
        setGoogleLinkStatus({
          hasGoogleAccount: response.data.data.hasGoogleAccount,
          loading: false,
          email: response.data.data.email,
          googleId: response.data.data.googleId,
          hasPassword: response.data.data.hasPassword, // Add this
        });
      }
    } catch (error) {
      console.error('Error checking Google link status:', error);
      setGoogleLinkStatus((prev) => ({ ...prev, loading: false }));
    }
  };

  // Link Google account to current user
  const linkGoogleAccount = async () => {
    try {
      if (!userDataLocal || !accessToken) {
        toast.error('B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ li√™n k·∫øt t√†i kho·∫£n Google');
        return;
      }

      console.log('üîó Starting Google account linking process');
      setIsLinkingGoogle(true);

      // Store current URL to return after linking
      sessionStorage.setItem('returnToUrl', window.location.pathname);

      // Redirect to Google linking auth
      // The backend will use state parameter to maintain user context
      window.location.href = `${apiBaseUrl}/link-google`;
    } catch (error) {
      console.error('Error initiating Google account linking:', error);
      setIsLinkingGoogle(false);
      toast.error('Kh√¥ng th·ªÉ b·∫Øt ƒë·∫ßu li√™n k·∫øt t√†i kho·∫£n Google');
    }
  };

  // Unlink Google account from current user
  const unlinkGoogleAccount = async () => {
    try {
      const response = await axios.delete(`${apiBaseUrl}/unlink-google`, {
        headers: { Authorization: `Bearer ${accessToken}` },
        timeout: 10000,
      });

      if (response.data.success) {
        toast.success('H·ªßy li√™n k·∫øt t√†i kho·∫£n Google th√†nh c√¥ng');
        // Update link status
        setGoogleLinkStatus({
          hasGoogleAccount: false,
          loading: false,
          email: userDataLocal?.email,
          googleId: null,
        });
        // Update Google auth status
        setIsGoogleAuthenticated(false);
        setShowGoogleAuthModal(false);
        return true;
      }
    } catch (error) {
      console.error('Error unlinking Google account:', error);
      toast.error(
        error.response?.data?.message ||
          'Kh√¥ng th·ªÉ h·ªßy li√™n k·∫øt t√†i kho·∫£n Google'
      );
      return false;
    }
  };

  // !!!----------------------------H√†m n√†y ch∆∞a s·ª≠a ch∆∞a upload ƒë∆∞·ª£c----------------------------!!!
  const uploadImageToCloudinary = async (file) => {
    const formData = new FormData();
    formData.append('file', file);
    formData.append(
      'upload_preset',
      'sdn302-recipes-sharing-web-single-image-for-recipe'
    );

    try {
      const response = await axios.post(
        `https://api.cloudinary.com/v1_1/${
          import.meta.env.VITE_CLOUDINARY_NAME
        }/image/upload`,
        formData,
        { timeout: 10000 }
      );
      console.log('VITE_CLOUDINARY_NAME', import.meta.env.VITE_CLOUDINARY_NAME);
      console.log('response', response);
      console.log('response.data', response.data);
      console.log('response.data.secureurl', response.data.secure_url);
      if (response.status === 200) {
        console.log('oke upload th√†nh c√¥ng');
        return response.data.secure_url; // Tr·∫£ v·ªÅ URL ·∫£nh ƒë√£ upload
      }
    } catch (error) {
      console.error('Error uploading to Cloudinary:', error);
      throw new Error('Upload to Cloudinary failed');
    }
  };

  /**
   * Fetch workspaces for current user
   */
  const fetchWorkspaces = async () => {
    setLoadingWorkspaces(true);
    setWorkspacesError(null);
    try {
      if (!accessToken) {
        setWorkspaces([]);
        return;
      }
      const res = await axios.get(`${apiBaseUrl}/workspace`, {
        headers: { Authorization: `Bearer ${accessToken}` },
      });
      setWorkspaces(res.data.data || []);
    } catch (err) {
      setWorkspacesError(err.response?.data?.message || err.message);
    } finally {
      setLoadingWorkspaces(false);
    }
  };

  // Initial fetch workspaces
  useEffect(() => {
    if (accessToken) fetchWorkspaces();
  }, [accessToken]);

  /**
   * Create a new workspace and update context
   */
  const createWorkspace = async ({ name, description }) => {
    const res = await axios.post(
      `${apiBaseUrl}/workspace/create`,
      { name, description },
      { headers: { Authorization: `Bearer ${accessToken}` } }
    );
    if (res.status !== 201) {
      throw new Error(res.data.message || 'T·∫°o workspace th·∫•t b·∫°i');
    }
    +(
      // refetch to√†n b·ªô ƒë·ªÉ ƒë·∫£m b·∫£o members ƒë√£ populate
      (await fetchWorkspaces())
    );
    return res.data.workspace;
  };

  // **Update workspace**:
  const updateWorkspace = async (workspaceId, updates) => {
    console.log('updateWorkspace', workspaceId, updates);

    const res = await axios.put(
      `${apiBaseUrl}/workspace/${workspaceId}`,
      updates,
      { headers: { Authorization: `Bearer ${accessToken}` } }
    );
    if (res.status !== 200) {
      throw new Error(res.data.message || 'C·∫≠p nh·∫≠t workspace th·∫•t b·∫°i');
    }

    const updated = res.data.workspace;
    // c·∫≠p nh·∫≠t l·∫°i state workspaces: map qua array, thay ƒë√∫ng item
    setWorkspaces((prev) =>
      prev.map((ws) => (ws._id === workspaceId ? updated : ws))
    );
    // refetch to√†n b·ªô ƒë·ªÉ ƒë·∫£m b·∫£o members ƒë√£ populate
    await fetchWorkspaces();
    return res.data.workspace;
  };

  // **Close workspace**:
  const closeWorkspace = async (workspaceId) => {
    const res = await axios.patch(
      `${apiBaseUrl}/workspace/${workspaceId}/close`, // ƒë∆∞·ªùng d·∫´n route BE b·∫°n ƒë√£ ƒë·ªãnh nghƒ©a
      {},
      { headers: { Authorization: `Bearer ${accessToken}` } }
    );
    if (res.status !== 200) {
      throw new Error(res.data.message || 'ƒê√≥ng workspace th·∫•t b·∫°i');
    }
    // Lo·∫°i b·ªè workspace ƒë√£ ƒë√≥ng kh·ªèi state
    setWorkspaces((prev) => prev.filter((ws) => ws._id !== workspaceId));
    toast.success('Workspace ƒë√£ ƒë∆∞·ª£c ƒë√≥ng th√†nh c√¥ng');
    return res.data.workspace;
  };

  //Delete workspace vƒ©nh vi·ªÖn
  const deleteWorkspace = async (workspaceId) => {
    const res = await axios.delete(`${apiBaseUrl}/workspace/${workspaceId}`, {
      headers: { Authorization: `Bearer ${accessToken}` },
    });
    if (res.status !== 200) {
      throw new Error(res.data.message || 'X√≥a workspace th·∫•t b·∫°i');
    }
    // remove kh·ªèi state
    setWorkspaces((prev) => prev.filter((ws) => ws._id !== workspaceId));
    toast.success('Workspace ƒë√£ b·ªã x√≥a vƒ©nh vi·ªÖn');
    return true;
  };

  const fetchBoards = async (workspaceId) => {
    setLoading(true);
    setError(null);
    try {
      const res = await axios.get(
        `${apiBaseUrl}/workspace/${workspaceId}/board`,
        { headers: { Authorization: `Bearer ${accessToken}` } }
      );
      // unwrap ƒë√∫ng field v√† √©p m·ªçi m·∫£ng v·ªÅ [] n·∫øu missing
      const raw = res.data.boards || [];
      const norm = raw.map((board) => ({
        ...board,
        members: board.members || [], // lu√¥n c√≥ m·∫£ng
        tasks: board.tasks || [], // lu√¥n c√≥ m·∫£ng
      }));
      setBoards(norm);
    } catch (err) {
      setError(err.response?.data?.message || err.message);
    } finally {
      setLoading(false);
    }
  };

  //T·∫°o calendar ri√™ng cho t·ª´ng board (n·∫øu ch∆∞a c√≥) sau khi fetch to√†n b·ªô boards c·ªßa user
  const createInitialCalendarForBoard = async (boardId) => {
    try {
      const response = await axios.post(
        `${apiBaseUrl}/calendar`,
        {
          name: 'Board Calendar',
          description: 'A calendar for board',
          ownerType: 'board',
          boardId,
        },
        {
          headers: {
            Authorization: `Bearer ${accessToken}`,
            timeout: 10000,
          },
        }
      );
    } catch (error) {
      // console.error('Error creating calendar:', error.response?.data?.message);
    }
  };

  //close board
  const closeBoard = async (workspaceId, boardId) => {
    try {
      const res = await axios.patch(
        `${apiBaseUrl}/workspace/${workspaceId}/board/${boardId}/close`,
        {},
        { headers: { Authorization: `Bearer ${accessToken}` } }
      );
      if (res.status !== 200) {
        throw new Error(res.data.message || 'ƒê√≥ng board th·∫•t b·∫°i');
      }
      toast.success(res.data.message);
      return res.data.board;
    } catch (err) {
      toast.error(err.response?.data?.message || err.message);
      throw err;
    }
  };

  //x√≥a board
  const deleteBoard = async (workspaceId, boardId) => {
    try {
      const res = await axios.delete(
        `${apiBaseUrl}/workspace/${workspaceId}/board/${boardId}`,
        { headers: { Authorization: `Bearer ${accessToken}` } }
      );
      if (res.status !== 200) {
        throw new Error(res.data.message || 'X√≥a board th·∫•t b·∫°i');
      }
      toast.success(res.data.message);
      return true;
    } catch (err) {
      toast.error(err.response?.data?.message || err.message);
      throw err;
    }
  };

  // Check if need to setup socket listeners when user changes
  useEffect(() => {
    let userId = userDataLocal?.id || userDataLocal?._id;
    if (
      isAuthenticated &&
      userId &&
      socketInitialized.current &&
      !socketConnected
    ) {
      console.log('üîÑ Setting up socket listeners for existing connection');
      setupSocketListeners();
    }
  }, [isAuthenticated, userDataLocal, socketConnected]);

  // L∆∞u th√¥ng b√°o v√†o localStorage
  useEffect(() => {
    try {
      localStorage.setItem('notifications', JSON.stringify(notifications));
    } catch (error) {
      console.error('Error saving notifications to localStorage:', error);
    }
  }, [notifications]);

  // Periodic socket status check v·ªõi c·∫£i thi·ªán
  useEffect(() => {
    if (!isAuthenticated || !socketInitialized.current) return;

    const checkSocketStatus = () => {
      try {
        const socket = getSocket();
        const isConnected = socket && socket.connected;
        const currentStatus = socketConnected;

        if (isConnected !== currentStatus) {
          console.log(
            `üîÑ Socket status mismatch detected: ${currentStatus} -> ${isConnected}`
          );
          setSocketConnected(isConnected);

          // Log detailed status for debugging
          if (isConnected) {
            console.log('‚úÖ Socket status updated to connected');
          } else {
            console.log('‚ùå Socket status updated to disconnected');
          }
        }
      } catch (error) {
        // Socket not initialized yet, set to false
        if (socketConnected) {
          console.log(
            '‚ö†Ô∏è Socket not accessible, setting status to disconnected'
          );
          setSocketConnected(false);
        }
      }
    };

    // Initial check
    checkSocketStatus();

    // Check every 2 seconds
    const interval = setInterval(checkSocketStatus, 2000);

    return () => clearInterval(interval);
  }, [isAuthenticated, socketInitialized.current, socketConnected]);

  // Initialize socket khi user ƒë√£ login (for page reload)
  useEffect(() => {
    let userId = userDataLocal?.id || userDataLocal?._id;
    if (
      accessToken &&
      userId &&
      !socketInitialized.current &&
      !isProcessingAuth.current
    ) {
      console.log('üîÑ Reinitializing socket after page reload');
      const initSocket = async () => {
        try {
          await initSocketClient(userId, apiBaseUrl, () => {
            console.log('üéØ Socket reconnected callback triggered');
            socketInitialized.current = true;
            setupSocketListeners();
          });
          console.log('‚úÖ Socket reinitialization completed');
        } catch (error) {
          console.error('‚ùå Socket reinitialization failed:', error);
        }
      };
      initSocket();
    }
  }, [accessToken, userDataLocal]); // Simplified dependencies

  // Ki·ªÉm tra Google link status khi user authenticated
  useEffect(() => {
    if (accessToken && isAuthenticated && !googleLinkStatus.loading) {
      checkGoogleLinkStatus();
    }
  }, [accessToken, isAuthenticated]);

  // G·ªçi checkGoogleAuth sau khi checkGoogleLinkStatus ho√†n th√†nh - CH·ªà KHI USER ƒê√É LINK GOOGLE ACCOUNT
  useEffect(() => {
    if (
      accessToken &&
      isAuthenticated &&
      !googleLinkStatus.loading &&
      !isCheckingGoogleAuth &&
      !isLinkingGoogle && // KH√îNG g·ªçi khi ƒëang linking
      googleLinkStatus.hasGoogleAccount // CH·ªà g·ªçi khi user ƒë√£ c√≥ Google account linked
    ) {
      // Delay m·ªôt ch√∫t ƒë·ªÉ ƒë·∫£m b·∫£o googleLinkStatus ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t ho√†n to√†n
      const timer = setTimeout(() => {
        console.log('üîç Auto-checking Google auth for linked user:', {
          hasGoogleAccount: googleLinkStatus.hasGoogleAccount,
          loading: googleLinkStatus.loading,
          isLinking: isLinkingGoogle,
        });
        checkGoogleAuth();
      }, 500);

      return () => clearTimeout(timer);
    } else if (
      !googleLinkStatus.loading &&
      !googleLinkStatus.hasGoogleAccount &&
      !isLinkingGoogle
    ) {
      console.log(
        'üö´ Skipping Google auth check - user has not linked Google account'
      );
    } else if (isLinkingGoogle) {
      console.log(
        'üîó Skipping Google auth check - user is currently linking Google account'
      );
    }
  }, [
    accessToken,
    isAuthenticated,
    googleLinkStatus.loading,
    googleLinkStatus.hasGoogleAccount,
    isLinkingGoogle,
  ]);

  // T·∫£i d·ªØ li·ªáu ban ƒë·∫ßu sau khi c√≥ userDataLocal
  useEffect(() => {
    let userId = userDataLocal?.id || userDataLocal?._id;
    if (
      accessToken &&
      userId &&
      !isCheckingGoogleAuth &&
      !isProcessingAuth.current
    ) {
      const loadInitialData = async () => {
        try {
          await Promise.all([
            fetchNotifications(true),
            // checkGoogleAuth() s·∫Ω ƒë∆∞·ª£c g·ªçi sau khi checkGoogleLinkStatus ho√†n th√†nh
            getCalendarUser(),
          ]);
        } catch (error) {
          console.error('Error loading initial data:', error);
        }
      };

      loadInitialData();
    }
  }, [accessToken, userDataLocal]); // Simplified dependencies

  // Fallback effect to ensure Google auth modal shows for users who have linked Google accounts
  useEffect(() => {
    if (
      isAuthenticated &&
      userDataLocal &&
      accessToken &&
      !isGoogleAuthenticated &&
      googleLinkStatus.hasGoogleAccount && // CH·ªà g·ªçi cho user ƒë√£ link Google account
      !googleLinkStatus.loading &&
      !isLinkingGoogle // KH√îNG g·ªçi khi ƒëang linking
    ) {
      console.log(
        'üîÑ Fallback: Checking Google auth for linked user modal display'
      );
      const timer = setTimeout(() => {
        checkGoogleAuth();
      }, 2000); // Delay for fallback check

      return () => clearTimeout(timer);
    } else if (
      isAuthenticated &&
      userDataLocal &&
      !googleLinkStatus.hasGoogleAccount &&
      !googleLinkStatus.loading &&
      !isLinkingGoogle
    ) {
      console.log(
        'üö´ Skipping fallback Google auth check - user has not linked Google account'
      );
    } else if (isLinkingGoogle) {
      console.log(
        'üîó Skipping fallback Google auth check - user is currently linking Google account'
      );
    }
  }, [
    isAuthenticated,
    userDataLocal,
    accessToken,
    isGoogleAuthenticated,
    googleLinkStatus.hasGoogleAccount,
    googleLinkStatus.loading,
    isLinkingGoogle,
  ]);

  // X·ª≠ l√Ω query parameter khi quay l·∫°i t·ª´ Google OAuth
  useEffect(() => {
    const query = new URLSearchParams(location.search);
    const error = query.get('error');
    const message = query.get('message');

    if (error === 'google_auth_failed') {
      toast.error(
        message || 'Email t√†i kho·∫£n ƒë√£ t·ªìn t·∫°i.'
        // Vui l√≤ng ƒëƒÉng nh·∫≠p th·ªß c√¥ng v√† k·∫øt n·ªëi v·ªõi t√†i kho·∫£n Google c·ªßa b·∫°n.
      );
      navigate('/login', { replace: true });
    }
  }, [location, navigate]);

  // Cancel event participation with reason
  const cancelEventParticipation = async (eventId, reason) => {
    if (!accessToken || !eventId || !reason) return false;

    try {
      const response = await axios.patch(
        `${apiBaseUrl}/event/${eventId}/cancel-invitation-and-give-reason`,
        { reason },
        {
          headers: { Authorization: `Bearer ${accessToken}` },
          timeout: 10000,
        }
      );

      if (response.data.status === 200) {
        toast.success('ƒê√£ h·ªßy tham gia s·ª± ki·ªán th√†nh c√¥ng');

        // Trigger calendar refresh
        window.dispatchEvent(
          new CustomEvent('eventUpdated', {
            detail: { eventId: eventId },
          })
        );

        return true;
      }
      return false;
    } catch (error) {
      console.error('Error canceling event participation:', error);
      toast.error(
        error.response?.data?.message || 'Kh√¥ng th·ªÉ h·ªßy tham gia s·ª± ki·ªán'
      );
      return false;
    }
  };

  // Event messaging functions
  const sendEventMessage = async (eventId, content) => {
    if (!accessToken || !eventId || !content?.trim()) return { success: false };

    try {
      const response = await axios.post(
        `${apiBaseUrl}/message/event/${eventId}`,
        { content: content.trim() },
        {
          headers: { Authorization: `Bearer ${accessToken}` },
          timeout: 10000,
        }
      );

      if (response.data.status === 'success') {
        return { success: true, message: response.data.data.message };
      }
    } catch (error) {
      console.error('Error sending event message:', error);
      toast.error(error.response?.data?.message || 'L·ªói khi g·ª≠i tin nh·∫Øn');
      return { success: false, error: error.response?.data?.message };
    }
  };

  const getEventMessages = async (eventId, limit = 50, skip = 0) => {
    if (!accessToken || !eventId) return { success: false };

    try {
      const response = await axios.get(
        `${apiBaseUrl}/message/event/${eventId}`,
        {
          headers: { Authorization: `Bearer ${accessToken}` },
          params: { limit, skip },
          timeout: 10000,
        }
      );

      if (response.data.status === 'success') {
        return {
          success: true,
          data: response.data.data,
          messages: response.data.data.messages,
          canSendMessage: response.data.data.canSendMessage,
          pagination: response.data.data.pagination,
        };
      }
    } catch (error) {
      console.error('Error getting event messages:', error);
      return { success: false, error: error.response?.data?.message };
    }
  };

  const loadMoreEventMessages = async (
    eventId,
    currentMessages,
    limit = 20
  ) => {
    if (!accessToken || !eventId) return { success: false };

    try {
      // S·ª≠ d·ª•ng cursor-based pagination v·ªõi timestamp c·ªßa message c≈© nh·∫•t
      const oldestMessage = currentMessages[0];
      const params = { limit };
      if (oldestMessage) {
        params.before = oldestMessage.createdAt;
      }

      const response = await axios.get(
        `${apiBaseUrl}/message/event/${eventId}`,
        {
          headers: { Authorization: `Bearer ${accessToken}` },
          params,
          timeout: 10000,
        }
      );

      if (response.data.status === 'success') {
        return {
          success: true,
          messages: response.data.data.messages,
          pagination: response.data.data.pagination,
        };
      }
    } catch (error) {
      console.error('Error loading more event messages:', error);
      return { success: false, error: error.response?.data?.message };
    }
  };

  const editEventMessage = async (messageId, content) => {
    if (!accessToken || !messageId || !content?.trim())
      return { success: false };

    try {
      const response = await axios.patch(
        `${apiBaseUrl}/message/${messageId}`,
        { content: content.trim() },
        {
          headers: { Authorization: `Bearer ${accessToken}` },
          timeout: 10000,
        }
      );

      if (response.data.status === 'success') {
        return { success: true, message: response.data.data.message };
      }
    } catch (error) {
      console.error('Error editing event message:', error);
      toast.error(
        error.response?.data?.message || 'L·ªói khi ch·ªânh s·ª≠a tin nh·∫Øn'
      );
      return { success: false, error: error.response?.data?.message };
    }
  };

  const deleteEventMessage = async (messageId) => {
    if (!accessToken || !messageId) return { success: false };

    try {
      const response = await axios.delete(
        `${apiBaseUrl}/message/${messageId}`,
        {
          headers: { Authorization: `Bearer ${accessToken}` },
          timeout: 10000,
        }
      );

      if (response.data.status === 'success') {
        toast.success('Tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c x√≥a');
        return { success: true };
      }
    } catch (error) {
      console.error('Error deleting event message:', error);
      toast.error(error.response?.data?.message || 'L·ªói khi x√≥a tin nh·∫Øn');
      return { success: false, error: error.response?.data?.message };
    }
  };

  // ============= TASK FUNCTIONS FOR BOARD CALENDAR SYNC =============

  const getBoardTasks = async (boardId, startDate, endDate) => {
    if (!accessToken || !boardId) return { success: false };

    try {
      const params = new URLSearchParams();
      if (startDate) params.append('startDate', startDate);
      if (endDate) params.append('endDate', endDate);

      const response = await axios.get(
        `${apiBaseUrl}/task/calendar/board/${boardId}?${params}`,
        {
          headers: { Authorization: `Bearer ${accessToken}` },
          timeout: 10000,
        }
      );

      if (response.data.status === 200 || response.status === 200) {
        return {
          success: true,
          data: response.data.data || [],
        };
      } else {
        console.error('API response not successful:', response.data);
        return { success: false, error: 'API response not successful' };
      }
    } catch (error) {
      console.error('Error getting board tasks:', error);
      return { success: false, error: error.response?.data?.message };
    }
  };

  const createTaskFromCalendar = async (taskData) => {
    if (!accessToken) return { success: false };

    try {
      const response = await axios.post(
        `${apiBaseUrl}/task/calendar/create`,
        taskData,
        {
          headers: { Authorization: `Bearer ${accessToken}` },
          timeout: 10000,
        }
      );

      if (response.data.status === 'success') {
        toast.success('T·∫°o task th√†nh c√¥ng');
        return {
          success: true,
          data: response.data.data,
        };
      }
    } catch (error) {
      console.error('Error creating task from calendar:', error);
      toast.error(error.response?.data?.message || 'L·ªói khi t·∫°o task');
      return { success: false, error: error.response?.data?.message };
    }
  };

  const updateTask = async (taskId, taskData) => {
    if (!accessToken || !taskId) return { success: false };

    try {
      const response = await axios.put(
        `${apiBaseUrl}/task/updateTask/${taskId}`,
        taskData,
        {
          headers: { Authorization: `Bearer ${accessToken}` },
          timeout: 10000,
        }
      );

      if (response.data.status === 'success') {
        toast.success('C·∫≠p nh·∫≠t task th√†nh c√¥ng');
        return {
          success: true,
          data: response.data.data,
        };
      }
    } catch (error) {
      console.error('Error updating task:', error);
      toast.error(error.response?.data?.message || 'L·ªói khi c·∫≠p nh·∫≠t task');
      return { success: false, error: error.response?.data?.message };
    }
  };

  const deleteTask = async (taskId) => {
    if (!accessToken || !taskId) return { success: false };

    try {
      const response = await axios.delete(
        `${apiBaseUrl}/task/deleteTask/${taskId}`,
        {
          headers: { Authorization: `Bearer ${accessToken}` },
          timeout: 10000,
        }
      );

      if (response.data.status === 'success') {
        toast.success('X√≥a task th√†nh c√¥ng');
        return { success: true };
      }
    } catch (error) {
      console.error('Error deleting task:', error);
      toast.error(error.response?.data?.message || 'L·ªói khi x√≥a task');
      return { success: false, error: error.response?.data?.message };
    }
  };

  const getBoardLists = async (boardId) => {
    if (!accessToken || !boardId) return { success: false };

    try {
      const response = await axios.get(`${apiBaseUrl}/list/board/${boardId}`, {
        headers: { Authorization: `Bearer ${accessToken}` },
        timeout: 10000,
      });

      if (response.data.status === 'success') {
        return {
          success: true,
          data: response.data.data,
        };
      }
    } catch (error) {
      console.error('Error getting board lists:', error);
      return { success: false, error: error.response?.data?.message };
    }
  };

  const getBoardDetails = async (boardId) => {
    if (!accessToken || !boardId) return { success: false };

    try {
      const response = await axios.get(
        `${apiBaseUrl}/workspace/board/${boardId}`,
        {
          headers: { Authorization: `Bearer ${accessToken}` },
          timeout: 10000,
        }
      );

      if (response.data.success) {
        return {
          success: true,
          data: response.data.board || response.data.data,
        };
      }
    } catch (error) {
      console.error('Error getting board details:', error);
      return { success: false, error: error.response?.data?.message };
    }
  };

  // ============= ENHANCED CONFLICT RESOLUTION =============

  const findAvailableTimeSlots = async (data) => {
    if (!accessToken) return { success: false };

    try {
      const response = await axios.post(
        `${apiBaseUrl}/event/find-available-slots`,
        data,
        {
          headers: { Authorization: `Bearer ${accessToken}` },
          timeout: 10000,
        }
      );

      if (response.data.status === 200) {
        return {
          success: true,
          data: response.data.data || [],
        };
      } else {
        return { success: false, error: 'API response not successful' };
      }
    } catch (error) {
      console.error('Error finding available time slots:', error);
      return { success: false, error: error.response?.data?.message };
    }
  };

  // ============= FILE MANAGEMENT FUNCTIONS =============

  // Upload file to task
  const uploadFileToTask = async (taskId, file) => {
    if (!accessToken || !taskId || !file) return { success: false };

    try {
      // ƒê·∫£m b·∫£o t√™n file ƒë∆∞·ª£c normalize UTF-8
      const normalizedFile = new File([file], file.name.normalize('NFC'), {
        type: file.type,
        lastModified: file.lastModified,
      });

      const formData = new FormData();
      formData.append('file', normalizedFile);
      formData.append('taskId', taskId);

      const response = await axios.post(
        `${apiBaseUrl}/files/upload-to-task`,
        formData,
        {
          headers: {
            Authorization: `Bearer ${accessToken}`,
            'Content-Type': 'multipart/form-data',
          },
          timeout: 30000, // TƒÉng timeout cho upload
        }
      );

      if (response.data.status === 'success') {
        toast.success('Upload file th√†nh c√¥ng');
        return {
          success: true,
          data: response.data.data,
        };
      }
    } catch (error) {
      console.error('Error uploading file to task:', error);

      // Ki·ªÉm tra n·∫øu l√† l·ªói token h·∫øt h·∫°n
      if (
        error.response?.status === 401 &&
        error.response?.data?.message?.includes('Token ƒë√£ h·∫øt h·∫°n')
      ) {
        // L·∫•y URL x√°c th·ª±c t·ª´ th√¥ng b√°o l·ªói
        const authUrl = error.response.data.message.split(': ')[1];
        if (authUrl) {
          toast.warning(
            'Token Google Drive ƒë√£ h·∫øt h·∫°n, ƒëang chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang x√°c th·ª±c...'
          );
          // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang x√°c th·ª±c Google
          window.location.href = authUrl;
          return { success: false, needReauth: true };
        }
      }

      toast.error(error.response?.data?.message || 'L·ªói khi upload file');
      return { success: false, error: error.response?.data?.message };
    }
  };

  // Get files of a task
  const getTaskFiles = async (taskId) => {
    if (!accessToken || !taskId) return { success: false };

    try {
      const response = await axios.get(
        `${apiBaseUrl}/files/list-file/${taskId}`,
        {
          headers: { Authorization: `Bearer ${accessToken}` },
          timeout: 10000,
        }
      );

      if (response.data.status === 'success') {
        return {
          success: true,
          data: response.data.data || [],
        };
      }
    } catch (error) {
      console.error('Error getting task files:', error);
      return { success: false, error: error.response?.data?.message };
    }
  };

  // Get file info
  const getFileInfo = async (fileDocId) => {
    if (!accessToken || !fileDocId) return { success: false };

    try {
      const response = await axios.get(`${apiBaseUrl}/files/${fileDocId}`, {
        headers: { Authorization: `Bearer ${accessToken}` },
        timeout: 10000,
      });

      if (response.data.status === 'success') {
        return {
          success: true,
          data: response.data.data,
        };
      }
    } catch (error) {
      console.error('Error getting file info:', error);
      return { success: false, error: error.response?.data?.message };
    }
  };

  // Download file
  const downloadFile = async (fileDocId, fileName) => {
    if (!accessToken || !fileDocId) return { success: false };

    try {
      const response = await axios.get(
        `${apiBaseUrl}/files/download/${fileDocId}`,
        {
          headers: { Authorization: `Bearer ${accessToken}` },
          responseType: 'blob',
          timeout: 30000,
        }
      );

      // Create blob link to download
      const url = window.URL.createObjectURL(new Blob([response.data]));
      const link = document.createElement('a');
      link.href = url;
      link.setAttribute('download', fileName || 'download');
      document.body.appendChild(link);
      link.click();
      link.remove();
      window.URL.revokeObjectURL(url);

      toast.success('T·∫£i file th√†nh c√¥ng');
      return { success: true };
    } catch (error) {
      console.error('Error downloading file:', error);
      toast.error(error.response?.data?.message || 'L·ªói khi t·∫£i file');
      return { success: false, error: error.response?.data?.message };
    }
  };

  // Delete file
  const deleteFile = async (fileDocId) => {
    if (!accessToken || !fileDocId) return { success: false };

    try {
      const response = await axios.delete(`${apiBaseUrl}/files/${fileDocId}`, {
        headers: { Authorization: `Bearer ${accessToken}` },
        data: { fileDocId }, // Send fileDocId in request body as expected by backend
        timeout: 10000,
      });

      if (response.data.status === 'success') {
        toast.success('X√≥a file th√†nh c√¥ng');
        return { success: true };
      }
    } catch (error) {
      console.error('Error deleting file:', error);
      toast.error(error.response?.data?.message || 'L·ªói khi x√≥a file');
      return { success: false, error: error.response?.data?.message };
    }
  };

  // Update file name
  const updateFileName = async (fileDocId, newName) => {
    if (!accessToken || !fileDocId || !newName?.trim())
      return { success: false };

    try {
      const response = await axios.patch(
        `${apiBaseUrl}/files/update/${fileDocId}`,
        { fileDocId, newName: newName.trim() },
        {
          headers: { Authorization: `Bearer ${accessToken}` },
          timeout: 10000,
        }
      );

      if (response.data.status === 'success') {
        toast.success('C·∫≠p nh·∫≠t t√™n file th√†nh c√¥ng');
        return {
          success: true,
          data: response.data.data,
        };
      }
    } catch (error) {
      console.error('Error updating file name:', error);
      toast.error(error.response?.data?.message || 'L·ªói khi c·∫≠p nh·∫≠t t√™n file');
      return { success: false, error: error.response?.data?.message };
    }
  };

  // Share file with task users
  const shareFileWithTaskUsers = async (fileDocId, taskId) => {
    if (!accessToken || !fileDocId || !taskId) return { success: false };

    try {
      const response = await axios.post(
        `${apiBaseUrl}/files/share/${fileDocId}`,
        { fileDocId, taskId },
        {
          headers: { Authorization: `Bearer ${accessToken}` },
          timeout: 10000,
        }
      );

      if (response.data.status === 'success') {
        toast.success('Chia s·∫ª file th√†nh c√¥ng');
        return { success: true };
      }
    } catch (error) {
      console.error('Error sharing file:', error);
      toast.error(error.response?.data?.message || 'L·ªói khi chia s·∫ª file');
      return { success: false, error: error.response?.data?.message };
    }
  };

  // Check if user can upload files (Google auth required)
  const canUploadFiles = () => {
    return (
      userDataLocal && userDataLocal.role && userDataLocal.role !== 'read-only'
    );
  };

  // Activity Log functions
  const fetchActivityLogs = async (
    boardId,
    isAdmin = false,
    skip = 0,
    limit = 50
  ) => {
    try {
      const endpoint = isAdmin
        ? `/activity/board/${boardId}/admin`
        : `/activity/board/${boardId}`;

      const response = await fetch(
        `${apiBaseUrl}${endpoint}?skip=${skip}&limit=${limit}`,
        {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
            Authorization: `Bearer ${accessToken}`,
          },
        }
      );

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      return {
        success: true,
        logs: data.data || [],
        results: data.results || 0,
      };
    } catch (error) {
      console.error('Error fetching activity logs:', error);
      return {
        success: false,
        error: error.message,
        logs: [],
        results: 0,
      };
    }
  };

  return (
    <CommonContext.Provider
      value={{
        isMobile,
        isTablet,
        isDesktop,
        toast,
        navigate,
        userDataLocal,
        setUserDataLocal,
        accessToken,
        uploadImageToCloudinary,
        apiBaseUrl,
        login,
        register,
        logout,
        googleLogin,
        handleLoginSuccess,
        createInitialCalendar,
        createInitialCalendarForBoard,
        getCalendarUser,
        getBoardCalendar,
        calendarUser,
        setCalendarUser,
        calendarBoard,
        setCalendarBoard,
        showGoogleAuthModal,
        setShowGoogleAuthModal,
        handleGoogleAuth,
        checkGoogleAuth,
        isGoogleAuthenticated,
        isCheckingGoogleAuth,
        // Google account linking
        googleLinkStatus,
        checkGoogleLinkStatus,
        linkGoogleAccount,
        unlinkGoogleAccount,
        isLinkingGoogle,
        setIsLinkingGoogle,
        isAuthenticated,
        notifications,
        notificationCount,
        setNotificationCount,
        fetchNotifications,
        markNotificationAsRead,
        respondToEventInvitation,
        updateAllUserEventsStatusByTime,
        updateEventStatusByTime,
        formatDateAMPMForVN,
        formatDateForNotification,
        formatDateShortForVN,
        workspaces,
        createWorkspace,
        closeWorkspace,
        deleteWorkspace,
        updateWorkspace,
        loadingWorkspaces,
        workspacesError,
        currentWorkspaceId,
        setCurrentWorkspaceId,
        boards,
        fetchBoards,
        closeBoard,
        deleteBoard,
        loadingBoards,
        boardsError,
        socketConnected,
        setupSocketListeners,
        fetchUserProfile,
        updateUserProfile,
        cancelEventParticipation,
        loadMoreNotifications,
        notificationPagination,
        sendEventMessage,
        getEventMessages,
        loadMoreEventMessages,
        editEventMessage,
        deleteEventMessage,
        // Task functions for board calendar sync
        getBoardTasks,
        createTaskFromCalendar,
        updateTask,
        deleteTask,
        getBoardLists,
        getBoardDetails,
        fetchAllSkills,
        skillsList,
        loadingSkills,
        skillsError,
        // Enhanced conflict resolution
        findAvailableTimeSlots,
        // File management functions
        uploadFileToTask,
        getTaskFiles,
        getFileInfo,
        downloadFile,
        deleteFile,
        updateFileName,
        shareFileWithTaskUsers,
        canUploadFiles,
        // Activity Log functions
        fetchActivityLogs,
      }}
    >
      <Toaster
        richColors
        position='top-center'
        expand={true}
        visibleToasts={3}
        toastOptions={{
          duration: 2000,
        }}
      />

      {children}
    </CommonContext.Provider>
  );
};
